#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *next;
} Node;

int trocas = 0;
int comparacoes = 0;

// Função para contar o tamanho da lista
int tamanhoLista(Node *head) {
    int count = 0;
    while (head != NULL) {
        count++;
        head = head->next;
    }
    return count;
}

// Retorna o ponteiro para o nó na posição 'index'
Node* getNodeAt(Node *head, int index) {
    int i = 0;
    while (head != NULL && i < index) {
        head = head->next;
        i++;
    }
    return head;
}

// Implementação de Shell Sort diretamente na lista
void shellSortLista(Node *head) {
    int n = tamanhoLista(head);

    // Geração dos gaps (sequência de Knuth)
    int h = 1;
    while (h < n / 3)
        h = 3 * h + 1;

    while (h >= 1) {
        for (int i = h; i < n; i++) {
            Node *iNode = getNodeAt(head, i);
            int temp = iNode->data;

            int j = i;
            while (j >= h) {
                Node *j_h_Node = getNodeAt(head, j - h);
                comparacoes++;
                if (temp < j_h_Node->data) {
                    Node *jNode = getNodeAt(head, j);
                    jNode->data = j_h_Node->data;
                    trocas++;
                    j -= h;
                } else {
                    break;
                }
            }
            Node *jNode = getNodeAt(head, j);
            if (jNode->data != temp) {
                jNode->data = temp;
                trocas++;
            }
        }
        h /= 3;
    }
}

// Função para imprimir a lista
void imprimirLista(Node *head) {
    while (head != NULL) {
        printf("%d ", head->data);
        head = head->next;
    }
    printf("\n");
}

// Função principal
int main() {
    int valores[] = {2, 4, 8, 10, 1, 5, 7, 6, 3, 9};
    int n = sizeof(valores) / sizeof(valores[0]);

    Node *head = NULL;
    Node *tail = NULL;

    for (int i = 0; i < n; i++) {
        Node *novo = (Node *)malloc(sizeof(Node));
        novo->data = valores[i];
        novo->next = NULL;
        if (head == NULL)
            head = tail = novo;
        else {
            tail->next = novo;
            tail = novo;
        }
    }

    printf("Lista original:\n");
    imprimirLista(head);

    shellSortLista(head);

    printf("\nLista ordenada:\n");
    imprimirLista(head);

    printf("\nComparações: %d\nTrocas: %d\n", comparacoes, trocas);

    // Liberar memória
    while (head != NULL) {
        Node *tmp = head;
        head = head->next;
        free(tmp);
    }

    return 0;
}
